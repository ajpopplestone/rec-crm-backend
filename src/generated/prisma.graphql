# source: http://localhost:4466
# timestamp: Thu May 23 2019 22:05:03 GMT+0100 (GMT Summer Time)

type AggregateBooking {
  count: Int!
}

type AggregateBusType {
  count: Int!
}

type AggregateCandidate {
  count: Int!
}

type AggregateCandRole {
  count: Int!
}

type AggregateCandStatus {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCompStatus {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Booking implements Node {
  id: ID!
  company(where: CompanyWhereInput): Company!
  candidate(where: CandidateWhereInput): Candidate!
  date: DateTime!
  role(where: CandRoleWhereInput): CandRole!
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  updatedAt: DateTime!
  updatedBy(where: UserWhereInput): User
  createdAt: DateTime!
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type BookingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  date: DateTime!
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  company: CompanyCreateOneWithoutBookingsInput!
  candidate: CandidateCreateOneWithoutBookingsInput!
  role: CandRoleCreateOneInput!
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

input BookingCreateManyWithoutCandidateInput {
  create: [BookingCreateWithoutCandidateInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutCompanyInput {
  create: [BookingCreateWithoutCompanyInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutCandidateInput {
  date: DateTime!
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  company: CompanyCreateOneWithoutBookingsInput!
  role: CandRoleCreateOneInput!
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

input BookingCreateWithoutCompanyInput {
  date: DateTime!
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  candidate: CandidateCreateOneWithoutBookingsInput!
  role: CandRoleCreateOneInput!
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

"""An edge in a connection."""
type BookingEdge {
  """The item at the end of the edge."""
  node: Booking!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  payRate_ASC
  payRate_DESC
  chargeRate_ASC
  chargeRate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookingPreviousValues {
  id: ID!
  date: DateTime!
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  updatedAt: DateTime!
  createdAt: DateTime!
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
}

input BookingUpdateInput {
  date: DateTime
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  company: CompanyUpdateOneWithoutBookingsInput
  candidate: CandidateUpdateOneWithoutBookingsInput
  role: CandRoleUpdateOneInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input BookingUpdateManyWithoutCandidateInput {
  create: [BookingCreateWithoutCandidateInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutCandidateInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutCandidateInput!]
}

input BookingUpdateManyWithoutCompanyInput {
  create: [BookingCreateWithoutCompanyInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutCompanyInput!]
}

input BookingUpdateWithoutCandidateDataInput {
  date: DateTime
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  company: CompanyUpdateOneWithoutBookingsInput
  role: CandRoleUpdateOneInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input BookingUpdateWithoutCompanyDataInput {
  date: DateTime
  startTime: Float
  endTime: Float
  payRate: Float
  chargeRate: Float
  candidate: CandidateUpdateOneWithoutBookingsInput
  role: CandRoleUpdateOneInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input BookingUpdateWithWhereUniqueWithoutCandidateInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutCandidateDataInput!
}

input BookingUpdateWithWhereUniqueWithoutCompanyInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutCompanyDataInput!
}

input BookingUpsertWithWhereUniqueWithoutCandidateInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutCandidateDataInput!
  create: BookingCreateWithoutCandidateInput!
}

input BookingUpsertWithWhereUniqueWithoutCompanyInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutCompanyDataInput!
  create: BookingCreateWithoutCompanyInput!
}

input BookingWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  startTime: Float

  """All values that are not equal to given value."""
  startTime_not: Float

  """All values that are contained in given list."""
  startTime_in: [Float!]

  """All values that are not contained in given list."""
  startTime_not_in: [Float!]

  """All values less than the given value."""
  startTime_lt: Float

  """All values less than or equal the given value."""
  startTime_lte: Float

  """All values greater than the given value."""
  startTime_gt: Float

  """All values greater than or equal the given value."""
  startTime_gte: Float
  endTime: Float

  """All values that are not equal to given value."""
  endTime_not: Float

  """All values that are contained in given list."""
  endTime_in: [Float!]

  """All values that are not contained in given list."""
  endTime_not_in: [Float!]

  """All values less than the given value."""
  endTime_lt: Float

  """All values less than or equal the given value."""
  endTime_lte: Float

  """All values greater than the given value."""
  endTime_gt: Float

  """All values greater than or equal the given value."""
  endTime_gte: Float
  payRate: Float

  """All values that are not equal to given value."""
  payRate_not: Float

  """All values that are contained in given list."""
  payRate_in: [Float!]

  """All values that are not contained in given list."""
  payRate_not_in: [Float!]

  """All values less than the given value."""
  payRate_lt: Float

  """All values less than or equal the given value."""
  payRate_lte: Float

  """All values greater than the given value."""
  payRate_gt: Float

  """All values greater than or equal the given value."""
  payRate_gte: Float
  chargeRate: Float

  """All values that are not equal to given value."""
  chargeRate_not: Float

  """All values that are contained in given list."""
  chargeRate_in: [Float!]

  """All values that are not contained in given list."""
  chargeRate_not_in: [Float!]

  """All values less than the given value."""
  chargeRate_lt: Float

  """All values less than or equal the given value."""
  chargeRate_lte: Float

  """All values greater than the given value."""
  chargeRate_gt: Float

  """All values greater than or equal the given value."""
  chargeRate_gte: Float
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  company: CompanyWhereInput
  candidate: CandidateWhereInput
  role: CandRoleWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input BookingWhereUniqueInput {
  id: ID
}

type BusType implements Node {
  id: ID!
  shortCode: String!
  description: String!
  colour: String
}

"""A connection to a list of items."""
type BusTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BusTypeEdge]!
  aggregate: AggregateBusType!
}

input BusTypeCreateInput {
  shortCode: String!
  description: String!
  colour: String
}

input BusTypeCreateOneInput {
  create: BusTypeCreateInput
  connect: BusTypeWhereUniqueInput
}

"""An edge in a connection."""
type BusTypeEdge {
  """The item at the end of the edge."""
  node: BusType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BusTypeOrderByInput {
  id_ASC
  id_DESC
  shortCode_ASC
  shortCode_DESC
  description_ASC
  description_DESC
  colour_ASC
  colour_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BusTypePreviousValues {
  id: ID!
  shortCode: String!
  description: String!
  colour: String
}

type BusTypeSubscriptionPayload {
  mutation: MutationType!
  node: BusType
  updatedFields: [String!]
  previousValues: BusTypePreviousValues
}

input BusTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BusTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BusTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BusTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BusTypeWhereInput
}

input BusTypeUpdateDataInput {
  shortCode: String
  description: String
  colour: String
}

input BusTypeUpdateInput {
  shortCode: String
  description: String
  colour: String
}

input BusTypeUpdateOneInput {
  create: BusTypeCreateInput
  connect: BusTypeWhereUniqueInput
  delete: Boolean
  update: BusTypeUpdateDataInput
  upsert: BusTypeUpsertNestedInput
}

input BusTypeUpsertNestedInput {
  update: BusTypeUpdateDataInput!
  create: BusTypeCreateInput!
}

input BusTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [BusTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BusTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BusTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  shortCode: String

  """All values that are not equal to given value."""
  shortCode_not: String

  """All values that are contained in given list."""
  shortCode_in: [String!]

  """All values that are not contained in given list."""
  shortCode_not_in: [String!]

  """All values less than the given value."""
  shortCode_lt: String

  """All values less than or equal the given value."""
  shortCode_lte: String

  """All values greater than the given value."""
  shortCode_gt: String

  """All values greater than or equal the given value."""
  shortCode_gte: String

  """All values containing the given string."""
  shortCode_contains: String

  """All values not containing the given string."""
  shortCode_not_contains: String

  """All values starting with the given string."""
  shortCode_starts_with: String

  """All values not starting with the given string."""
  shortCode_not_starts_with: String

  """All values ending with the given string."""
  shortCode_ends_with: String

  """All values not ending with the given string."""
  shortCode_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  colour: String

  """All values that are not equal to given value."""
  colour_not: String

  """All values that are contained in given list."""
  colour_in: [String!]

  """All values that are not contained in given list."""
  colour_not_in: [String!]

  """All values less than the given value."""
  colour_lt: String

  """All values less than or equal the given value."""
  colour_lte: String

  """All values greater than the given value."""
  colour_gt: String

  """All values greater than or equal the given value."""
  colour_gte: String

  """All values containing the given string."""
  colour_contains: String

  """All values not containing the given string."""
  colour_not_contains: String

  """All values starting with the given string."""
  colour_starts_with: String

  """All values not starting with the given string."""
  colour_not_starts_with: String

  """All values ending with the given string."""
  colour_ends_with: String

  """All values not ending with the given string."""
  colour_not_ends_with: String
}

input BusTypeWhereUniqueInput {
  id: ID
  shortCode: String
}

type Candidate implements Node {
  id: ID!
  email: String
  password: String
  forename: String!
  surname: String!
  status(where: CandStatusWhereInput): CandStatus
  phone: String
  consultant(where: UserWhereInput): User
  role(where: CandRoleWhereInput): CandRole
  address: String
  postcode: String
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  updatedAt: DateTime!
  updatedBy(where: UserWhereInput): User
  createdAt: DateTime!
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type CandidateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CandidateEdge]!
  aggregate: AggregateCandidate!
}

input CandidateCreateInput {
  email: String
  password: String
  forename: String!
  surname: String!
  phone: String
  address: String
  postcode: String
  status: CandStatusCreateOneInput
  consultant: UserCreateOneWithoutCandidatesInput
  role: CandRoleCreateOneInput
  bookings: BookingCreateManyWithoutCandidateInput
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

input CandidateCreateManyWithoutConsultantInput {
  create: [CandidateCreateWithoutConsultantInput!]
  connect: [CandidateWhereUniqueInput!]
}

input CandidateCreateOneWithoutBookingsInput {
  create: CandidateCreateWithoutBookingsInput
  connect: CandidateWhereUniqueInput
}

input CandidateCreateWithoutBookingsInput {
  email: String
  password: String
  forename: String!
  surname: String!
  phone: String
  address: String
  postcode: String
  status: CandStatusCreateOneInput
  consultant: UserCreateOneWithoutCandidatesInput
  role: CandRoleCreateOneInput
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

input CandidateCreateWithoutConsultantInput {
  email: String
  password: String
  forename: String!
  surname: String!
  phone: String
  address: String
  postcode: String
  status: CandStatusCreateOneInput
  role: CandRoleCreateOneInput
  bookings: BookingCreateManyWithoutCandidateInput
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

"""An edge in a connection."""
type CandidateEdge {
  """The item at the end of the edge."""
  node: Candidate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CandidateOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  forename_ASC
  forename_DESC
  surname_ASC
  surname_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  postcode_ASC
  postcode_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CandidatePreviousValues {
  id: ID!
  email: String
  password: String
  forename: String!
  surname: String!
  phone: String
  address: String
  postcode: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CandidateSubscriptionPayload {
  mutation: MutationType!
  node: Candidate
  updatedFields: [String!]
  previousValues: CandidatePreviousValues
}

input CandidateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CandidateWhereInput
}

input CandidateUpdateInput {
  email: String
  password: String
  forename: String
  surname: String
  phone: String
  address: String
  postcode: String
  status: CandStatusUpdateOneInput
  consultant: UserUpdateOneWithoutCandidatesInput
  role: CandRoleUpdateOneInput
  bookings: BookingUpdateManyWithoutCandidateInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input CandidateUpdateManyWithoutConsultantInput {
  create: [CandidateCreateWithoutConsultantInput!]
  connect: [CandidateWhereUniqueInput!]
  disconnect: [CandidateWhereUniqueInput!]
  delete: [CandidateWhereUniqueInput!]
  update: [CandidateUpdateWithWhereUniqueWithoutConsultantInput!]
  upsert: [CandidateUpsertWithWhereUniqueWithoutConsultantInput!]
}

input CandidateUpdateOneWithoutBookingsInput {
  create: CandidateCreateWithoutBookingsInput
  connect: CandidateWhereUniqueInput
  delete: Boolean
  update: CandidateUpdateWithoutBookingsDataInput
  upsert: CandidateUpsertWithoutBookingsInput
}

input CandidateUpdateWithoutBookingsDataInput {
  email: String
  password: String
  forename: String
  surname: String
  phone: String
  address: String
  postcode: String
  status: CandStatusUpdateOneInput
  consultant: UserUpdateOneWithoutCandidatesInput
  role: CandRoleUpdateOneInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input CandidateUpdateWithoutConsultantDataInput {
  email: String
  password: String
  forename: String
  surname: String
  phone: String
  address: String
  postcode: String
  status: CandStatusUpdateOneInput
  role: CandRoleUpdateOneInput
  bookings: BookingUpdateManyWithoutCandidateInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input CandidateUpdateWithWhereUniqueWithoutConsultantInput {
  where: CandidateWhereUniqueInput!
  data: CandidateUpdateWithoutConsultantDataInput!
}

input CandidateUpsertWithoutBookingsInput {
  update: CandidateUpdateWithoutBookingsDataInput!
  create: CandidateCreateWithoutBookingsInput!
}

input CandidateUpsertWithWhereUniqueWithoutConsultantInput {
  where: CandidateWhereUniqueInput!
  update: CandidateUpdateWithoutConsultantDataInput!
  create: CandidateCreateWithoutConsultantInput!
}

input CandidateWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandidateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandidateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  forename: String

  """All values that are not equal to given value."""
  forename_not: String

  """All values that are contained in given list."""
  forename_in: [String!]

  """All values that are not contained in given list."""
  forename_not_in: [String!]

  """All values less than the given value."""
  forename_lt: String

  """All values less than or equal the given value."""
  forename_lte: String

  """All values greater than the given value."""
  forename_gt: String

  """All values greater than or equal the given value."""
  forename_gte: String

  """All values containing the given string."""
  forename_contains: String

  """All values not containing the given string."""
  forename_not_contains: String

  """All values starting with the given string."""
  forename_starts_with: String

  """All values not starting with the given string."""
  forename_not_starts_with: String

  """All values ending with the given string."""
  forename_ends_with: String

  """All values not ending with the given string."""
  forename_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  postcode: String

  """All values that are not equal to given value."""
  postcode_not: String

  """All values that are contained in given list."""
  postcode_in: [String!]

  """All values that are not contained in given list."""
  postcode_not_in: [String!]

  """All values less than the given value."""
  postcode_lt: String

  """All values less than or equal the given value."""
  postcode_lte: String

  """All values greater than the given value."""
  postcode_gt: String

  """All values greater than or equal the given value."""
  postcode_gte: String

  """All values containing the given string."""
  postcode_contains: String

  """All values not containing the given string."""
  postcode_not_contains: String

  """All values starting with the given string."""
  postcode_starts_with: String

  """All values not starting with the given string."""
  postcode_not_starts_with: String

  """All values ending with the given string."""
  postcode_ends_with: String

  """All values not ending with the given string."""
  postcode_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  status: CandStatusWhereInput
  consultant: UserWhereInput
  role: CandRoleWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input CandidateWhereUniqueInput {
  id: ID
}

type CandRole implements Node {
  id: ID!
  shortCode: String!
  description: String!
  businessType(where: BusTypeWhereInput): BusType
}

"""A connection to a list of items."""
type CandRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CandRoleEdge]!
  aggregate: AggregateCandRole!
}

input CandRoleCreateInput {
  shortCode: String!
  description: String!
  businessType: BusTypeCreateOneInput
}

input CandRoleCreateOneInput {
  create: CandRoleCreateInput
  connect: CandRoleWhereUniqueInput
}

"""An edge in a connection."""
type CandRoleEdge {
  """The item at the end of the edge."""
  node: CandRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CandRoleOrderByInput {
  id_ASC
  id_DESC
  shortCode_ASC
  shortCode_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CandRolePreviousValues {
  id: ID!
  shortCode: String!
  description: String!
}

type CandRoleSubscriptionPayload {
  mutation: MutationType!
  node: CandRole
  updatedFields: [String!]
  previousValues: CandRolePreviousValues
}

input CandRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CandRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandRoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CandRoleWhereInput
}

input CandRoleUpdateDataInput {
  shortCode: String
  description: String
  businessType: BusTypeUpdateOneInput
}

input CandRoleUpdateInput {
  shortCode: String
  description: String
  businessType: BusTypeUpdateOneInput
}

input CandRoleUpdateOneInput {
  create: CandRoleCreateInput
  connect: CandRoleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CandRoleUpdateDataInput
  upsert: CandRoleUpsertNestedInput
}

input CandRoleUpsertNestedInput {
  update: CandRoleUpdateDataInput!
  create: CandRoleCreateInput!
}

input CandRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [CandRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  shortCode: String

  """All values that are not equal to given value."""
  shortCode_not: String

  """All values that are contained in given list."""
  shortCode_in: [String!]

  """All values that are not contained in given list."""
  shortCode_not_in: [String!]

  """All values less than the given value."""
  shortCode_lt: String

  """All values less than or equal the given value."""
  shortCode_lte: String

  """All values greater than the given value."""
  shortCode_gt: String

  """All values greater than or equal the given value."""
  shortCode_gte: String

  """All values containing the given string."""
  shortCode_contains: String

  """All values not containing the given string."""
  shortCode_not_contains: String

  """All values starting with the given string."""
  shortCode_starts_with: String

  """All values not starting with the given string."""
  shortCode_not_starts_with: String

  """All values ending with the given string."""
  shortCode_ends_with: String

  """All values not ending with the given string."""
  shortCode_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  businessType: BusTypeWhereInput
}

input CandRoleWhereUniqueInput {
  id: ID
  shortCode: String
}

type CandStatus implements Node {
  id: ID!
  shortCode: String!
  description: String!
}

"""A connection to a list of items."""
type CandStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CandStatusEdge]!
  aggregate: AggregateCandStatus!
}

input CandStatusCreateInput {
  shortCode: String!
  description: String!
}

input CandStatusCreateOneInput {
  create: CandStatusCreateInput
  connect: CandStatusWhereUniqueInput
}

"""An edge in a connection."""
type CandStatusEdge {
  """The item at the end of the edge."""
  node: CandStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CandStatusOrderByInput {
  id_ASC
  id_DESC
  shortCode_ASC
  shortCode_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CandStatusPreviousValues {
  id: ID!
  shortCode: String!
  description: String!
}

type CandStatusSubscriptionPayload {
  mutation: MutationType!
  node: CandStatus
  updatedFields: [String!]
  previousValues: CandStatusPreviousValues
}

input CandStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CandStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CandStatusWhereInput
}

input CandStatusUpdateDataInput {
  shortCode: String
  description: String
}

input CandStatusUpdateInput {
  shortCode: String
  description: String
}

input CandStatusUpdateOneInput {
  create: CandStatusCreateInput
  connect: CandStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CandStatusUpdateDataInput
  upsert: CandStatusUpsertNestedInput
}

input CandStatusUpsertNestedInput {
  update: CandStatusUpdateDataInput!
  create: CandStatusCreateInput!
}

input CandStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [CandStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [CandStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CandStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  shortCode: String

  """All values that are not equal to given value."""
  shortCode_not: String

  """All values that are contained in given list."""
  shortCode_in: [String!]

  """All values that are not contained in given list."""
  shortCode_not_in: [String!]

  """All values less than the given value."""
  shortCode_lt: String

  """All values less than or equal the given value."""
  shortCode_lte: String

  """All values greater than the given value."""
  shortCode_gt: String

  """All values greater than or equal the given value."""
  shortCode_gte: String

  """All values containing the given string."""
  shortCode_contains: String

  """All values not containing the given string."""
  shortCode_not_contains: String

  """All values starting with the given string."""
  shortCode_starts_with: String

  """All values not starting with the given string."""
  shortCode_not_starts_with: String

  """All values ending with the given string."""
  shortCode_ends_with: String

  """All values not ending with the given string."""
  shortCode_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input CandStatusWhereUniqueInput {
  id: ID
  shortCode: String
}

type Company implements Node {
  id: ID!
  name: String!
  email: String
  password: String
  status(where: CompStatusWhereInput): CompStatus!
  website: String
  phone: String
  businessType(where: BusTypeWhereInput): BusType!
  address: String
  postcode: String
  consultant(where: UserWhereInput): User
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  updatedAt: DateTime!
  updatedBy(where: UserWhereInput): User
  createdAt: DateTime!
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  name: String!
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  status: CompStatusCreateOneInput!
  businessType: BusTypeCreateOneInput!
  consultant: UserCreateOneWithoutCompaniesInput
  bookings: BookingCreateManyWithoutCompanyInput
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

input CompanyCreateManyWithoutConsultantInput {
  create: [CompanyCreateWithoutConsultantInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutBookingsInput {
  create: CompanyCreateWithoutBookingsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutBookingsInput {
  name: String!
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  status: CompStatusCreateOneInput!
  businessType: BusTypeCreateOneInput!
  consultant: UserCreateOneWithoutCompaniesInput
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

input CompanyCreateWithoutConsultantInput {
  name: String!
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  status: CompStatusCreateOneInput!
  businessType: BusTypeCreateOneInput!
  bookings: BookingCreateManyWithoutCompanyInput
  updatedBy: UserCreateOneInput
  createdBy: UserCreateOneInput
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  website_ASC
  website_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  postcode_ASC
  postcode_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  name: String
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  status: CompStatusUpdateOneInput
  businessType: BusTypeUpdateOneInput
  consultant: UserUpdateOneWithoutCompaniesInput
  bookings: BookingUpdateManyWithoutCompanyInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input CompanyUpdateManyWithoutConsultantInput {
  create: [CompanyCreateWithoutConsultantInput!]
  connect: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutConsultantInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutConsultantInput!]
}

input CompanyUpdateOneWithoutBookingsInput {
  create: CompanyCreateWithoutBookingsInput
  connect: CompanyWhereUniqueInput
  delete: Boolean
  update: CompanyUpdateWithoutBookingsDataInput
  upsert: CompanyUpsertWithoutBookingsInput
}

input CompanyUpdateWithoutBookingsDataInput {
  name: String
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  status: CompStatusUpdateOneInput
  businessType: BusTypeUpdateOneInput
  consultant: UserUpdateOneWithoutCompaniesInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input CompanyUpdateWithoutConsultantDataInput {
  name: String
  email: String
  password: String
  website: String
  phone: String
  address: String
  postcode: String
  status: CompStatusUpdateOneInput
  businessType: BusTypeUpdateOneInput
  bookings: BookingUpdateManyWithoutCompanyInput
  updatedBy: UserUpdateOneInput
  createdBy: UserUpdateOneInput
}

input CompanyUpdateWithWhereUniqueWithoutConsultantInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutConsultantDataInput!
}

input CompanyUpsertWithoutBookingsInput {
  update: CompanyUpdateWithoutBookingsDataInput!
  create: CompanyCreateWithoutBookingsInput!
}

input CompanyUpsertWithWhereUniqueWithoutConsultantInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutConsultantDataInput!
  create: CompanyCreateWithoutConsultantInput!
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  postcode: String

  """All values that are not equal to given value."""
  postcode_not: String

  """All values that are contained in given list."""
  postcode_in: [String!]

  """All values that are not contained in given list."""
  postcode_not_in: [String!]

  """All values less than the given value."""
  postcode_lt: String

  """All values less than or equal the given value."""
  postcode_lte: String

  """All values greater than the given value."""
  postcode_gt: String

  """All values greater than or equal the given value."""
  postcode_gte: String

  """All values containing the given string."""
  postcode_contains: String

  """All values not containing the given string."""
  postcode_not_contains: String

  """All values starting with the given string."""
  postcode_starts_with: String

  """All values not starting with the given string."""
  postcode_not_starts_with: String

  """All values ending with the given string."""
  postcode_ends_with: String

  """All values not ending with the given string."""
  postcode_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  status: CompStatusWhereInput
  businessType: BusTypeWhereInput
  consultant: UserWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
}

type CompStatus implements Node {
  id: ID!
  shortCode: String!
  description: String!
}

"""A connection to a list of items."""
type CompStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompStatusEdge]!
  aggregate: AggregateCompStatus!
}

input CompStatusCreateInput {
  shortCode: String!
  description: String!
}

input CompStatusCreateOneInput {
  create: CompStatusCreateInput
  connect: CompStatusWhereUniqueInput
}

"""An edge in a connection."""
type CompStatusEdge {
  """The item at the end of the edge."""
  node: CompStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompStatusOrderByInput {
  id_ASC
  id_DESC
  shortCode_ASC
  shortCode_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CompStatusPreviousValues {
  id: ID!
  shortCode: String!
  description: String!
}

type CompStatusSubscriptionPayload {
  mutation: MutationType!
  node: CompStatus
  updatedFields: [String!]
  previousValues: CompStatusPreviousValues
}

input CompStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompStatusWhereInput
}

input CompStatusUpdateDataInput {
  shortCode: String
  description: String
}

input CompStatusUpdateInput {
  shortCode: String
  description: String
}

input CompStatusUpdateOneInput {
  create: CompStatusCreateInput
  connect: CompStatusWhereUniqueInput
  delete: Boolean
  update: CompStatusUpdateDataInput
  upsert: CompStatusUpsertNestedInput
}

input CompStatusUpsertNestedInput {
  update: CompStatusUpdateDataInput!
  create: CompStatusCreateInput!
}

input CompStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [CompStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  shortCode: String

  """All values that are not equal to given value."""
  shortCode_not: String

  """All values that are contained in given list."""
  shortCode_in: [String!]

  """All values that are not contained in given list."""
  shortCode_not_in: [String!]

  """All values less than the given value."""
  shortCode_lt: String

  """All values less than or equal the given value."""
  shortCode_lte: String

  """All values greater than the given value."""
  shortCode_gt: String

  """All values greater than or equal the given value."""
  shortCode_gte: String

  """All values containing the given string."""
  shortCode_contains: String

  """All values not containing the given string."""
  shortCode_not_contains: String

  """All values starting with the given string."""
  shortCode_starts_with: String

  """All values not starting with the given string."""
  shortCode_not_starts_with: String

  """All values ending with the given string."""
  shortCode_ends_with: String

  """All values not ending with the given string."""
  shortCode_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input CompStatusWhereUniqueInput {
  id: ID
  shortCode: String
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCandidate(data: CandidateCreateInput!): Candidate!
  createCompany(data: CompanyCreateInput!): Company!
  createBooking(data: BookingCreateInput!): Booking!
  createCandRole(data: CandRoleCreateInput!): CandRole!
  createCompStatus(data: CompStatusCreateInput!): CompStatus!
  createUser(data: UserCreateInput!): User!
  createCandStatus(data: CandStatusCreateInput!): CandStatus!
  createBusType(data: BusTypeCreateInput!): BusType!
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateCandRole(data: CandRoleUpdateInput!, where: CandRoleWhereUniqueInput!): CandRole
  updateCompStatus(data: CompStatusUpdateInput!, where: CompStatusWhereUniqueInput!): CompStatus
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCandStatus(data: CandStatusUpdateInput!, where: CandStatusWhereUniqueInput!): CandStatus
  updateBusType(data: BusTypeUpdateInput!, where: BusTypeWhereUniqueInput!): BusType
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteCandRole(where: CandRoleWhereUniqueInput!): CandRole
  deleteCompStatus(where: CompStatusWhereUniqueInput!): CompStatus
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCandStatus(where: CandStatusWhereUniqueInput!): CandStatus
  deleteBusType(where: BusTypeWhereUniqueInput!): BusType
  upsertCandidate(where: CandidateWhereUniqueInput!, create: CandidateCreateInput!, update: CandidateUpdateInput!): Candidate!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  upsertCandRole(where: CandRoleWhereUniqueInput!, create: CandRoleCreateInput!, update: CandRoleUpdateInput!): CandRole!
  upsertCompStatus(where: CompStatusWhereUniqueInput!, create: CompStatusCreateInput!, update: CompStatusUpdateInput!): CompStatus!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCandStatus(where: CandStatusWhereUniqueInput!, create: CandStatusCreateInput!, update: CandStatusUpdateInput!): CandStatus!
  upsertBusType(where: BusTypeWhereUniqueInput!, create: BusTypeCreateInput!, update: BusTypeUpdateInput!): BusType!
  updateManyCandidates(data: CandidateUpdateInput!, where: CandidateWhereInput): BatchPayload!
  updateManyCompanies(data: CompanyUpdateInput!, where: CompanyWhereInput): BatchPayload!
  updateManyBookings(data: BookingUpdateInput!, where: BookingWhereInput): BatchPayload!
  updateManyCandRoles(data: CandRoleUpdateInput!, where: CandRoleWhereInput): BatchPayload!
  updateManyCompStatuses(data: CompStatusUpdateInput!, where: CompStatusWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyCandStatuses(data: CandStatusUpdateInput!, where: CandStatusWhereInput): BatchPayload!
  updateManyBusTypes(data: BusTypeUpdateInput!, where: BusTypeWhereInput): BatchPayload!
  deleteManyCandidates(where: CandidateWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  deleteManyCandRoles(where: CandRoleWhereInput): BatchPayload!
  deleteManyCompStatuses(where: CompStatusWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCandStatuses(where: CandStatusWhereInput): BatchPayload!
  deleteManyBusTypes(where: BusTypeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  candidates(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate]!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  candRoles(where: CandRoleWhereInput, orderBy: CandRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CandRole]!
  compStatuses(where: CompStatusWhereInput, orderBy: CompStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompStatus]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  candStatuses(where: CandStatusWhereInput, orderBy: CandStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CandStatus]!
  busTypes(where: BusTypeWhereInput, orderBy: BusTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BusType]!
  candidate(where: CandidateWhereUniqueInput!): Candidate
  company(where: CompanyWhereUniqueInput!): Company
  booking(where: BookingWhereUniqueInput!): Booking
  candRole(where: CandRoleWhereUniqueInput!): CandRole
  compStatus(where: CompStatusWhereUniqueInput!): CompStatus
  user(where: UserWhereUniqueInput!): User
  candStatus(where: CandStatusWhereUniqueInput!): CandStatus
  busType(where: BusTypeWhereUniqueInput!): BusType
  candidatesConnection(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandidateConnection!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  candRolesConnection(where: CandRoleWhereInput, orderBy: CandRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandRoleConnection!
  compStatusesConnection(where: CompStatusWhereInput, orderBy: CompStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompStatusConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  candStatusesConnection(where: CandStatusWhereInput, orderBy: CandStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandStatusConnection!
  busTypesConnection(where: BusTypeWhereInput, orderBy: BusTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BusTypeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  candidate(where: CandidateSubscriptionWhereInput): CandidateSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  candRole(where: CandRoleSubscriptionWhereInput): CandRoleSubscriptionPayload
  compStatus(where: CompStatusSubscriptionWhereInput): CompStatusSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  candStatus(where: CandStatusSubscriptionWhereInput): CandStatusSubscriptionPayload
  busType(where: BusTypeSubscriptionWhereInput): BusTypeSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  delPermission: Boolean!
  officeManager: Boolean!
  lastLogin: DateTime
  candidates(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate!]
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  delPermission: Boolean!
  officeManager: Boolean!
  lastLogin: DateTime
  candidates: CandidateCreateManyWithoutConsultantInput
  companies: CompanyCreateManyWithoutConsultantInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCandidatesInput {
  create: UserCreateWithoutCandidatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCandidatesInput {
  email: String!
  password: String!
  name: String!
  delPermission: Boolean!
  officeManager: Boolean!
  lastLogin: DateTime
  companies: CompanyCreateManyWithoutConsultantInput
}

input UserCreateWithoutCompaniesInput {
  email: String!
  password: String!
  name: String!
  delPermission: Boolean!
  officeManager: Boolean!
  lastLogin: DateTime
  candidates: CandidateCreateManyWithoutConsultantInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  delPermission_ASC
  delPermission_DESC
  officeManager_ASC
  officeManager_DESC
  lastLogin_ASC
  lastLogin_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  delPermission: Boolean!
  officeManager: Boolean!
  lastLogin: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  delPermission: Boolean
  officeManager: Boolean
  lastLogin: DateTime
  candidates: CandidateUpdateManyWithoutConsultantInput
  companies: CompanyUpdateManyWithoutConsultantInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  delPermission: Boolean
  officeManager: Boolean
  lastLogin: DateTime
  candidates: CandidateUpdateManyWithoutConsultantInput
  companies: CompanyUpdateManyWithoutConsultantInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutCandidatesInput {
  create: UserCreateWithoutCandidatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCandidatesDataInput
  upsert: UserUpsertWithoutCandidatesInput
}

input UserUpdateOneWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCompaniesDataInput
  upsert: UserUpsertWithoutCompaniesInput
}

input UserUpdateWithoutCandidatesDataInput {
  email: String
  password: String
  name: String
  delPermission: Boolean
  officeManager: Boolean
  lastLogin: DateTime
  companies: CompanyUpdateManyWithoutConsultantInput
}

input UserUpdateWithoutCompaniesDataInput {
  email: String
  password: String
  name: String
  delPermission: Boolean
  officeManager: Boolean
  lastLogin: DateTime
  candidates: CandidateUpdateManyWithoutConsultantInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCandidatesInput {
  update: UserUpdateWithoutCandidatesDataInput!
  create: UserCreateWithoutCandidatesInput!
}

input UserUpsertWithoutCompaniesInput {
  update: UserUpdateWithoutCompaniesDataInput!
  create: UserCreateWithoutCompaniesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  delPermission: Boolean

  """All values that are not equal to given value."""
  delPermission_not: Boolean
  officeManager: Boolean

  """All values that are not equal to given value."""
  officeManager_not: Boolean
  lastLogin: DateTime

  """All values that are not equal to given value."""
  lastLogin_not: DateTime

  """All values that are contained in given list."""
  lastLogin_in: [DateTime!]

  """All values that are not contained in given list."""
  lastLogin_not_in: [DateTime!]

  """All values less than the given value."""
  lastLogin_lt: DateTime

  """All values less than or equal the given value."""
  lastLogin_lte: DateTime

  """All values greater than the given value."""
  lastLogin_gt: DateTime

  """All values greater than or equal the given value."""
  lastLogin_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  candidates_every: CandidateWhereInput
  candidates_some: CandidateWhereInput
  candidates_none: CandidateWhereInput
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
